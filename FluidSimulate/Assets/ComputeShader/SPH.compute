// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Test
#pragma kernel ComputeForce

struct Particle{
	float3 pos;
	float3 vel;
	float3 velEval;
	float3 acc;
	float density;
	float pressure;
	int gridIndex;
};


// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
 
RWStructuredBuffer<Particle> particles;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}


[numthreads(64,1,1)]
void Test(uint3  id : SV_DispatchThreadID) {
	//test
}

[numthreads(64,1,1)]
void ComputeForce(uint3 id : SV_DispatchThreadID) { 
	particles[id.x].pos = particles[id.x].pos+float3(0,0.1,0);

}